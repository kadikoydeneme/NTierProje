--Core--
Referanslar = Entity Framework(NuGet)
1)NTier.Core isimli bir C# Library açıyoruz.
1.1)Bu kütüphane içerisine Entity,Map ve Service klasörlerini ekliyoruz.
1.2.1)Entity içerisine Enum klasörü açıyoruz, Statuleri enum olarak yerleştiriyoruz.
1.2.2)IEntity interface oluşturuyoruz. ID tanımlaması yapıyoruz.
1.2.3)CoreEntity class oluşturuyoruz. Ortak tüm propertyleri yazıp constructor içerisinde ön tanımlama yapıyoruz.
1.3.1)Map sınıfı yazıyoruz ve CoreEntity içerisinde var olan tüm propertylerin mapleme işlemini "Fluent Api" kullanarak gerçekleştiriyoruz.
1.4)Service içerisine veritabanı üzerinde gerçekleştirilecek ortak işlemlerimizi içeren metotları ekliyoruz.

--Model--
Referanslar = NTier.Core , Entity Framework(NuGet)
1)NTier.Model isimli bir C# Library açıyoruz.
1.1)Kütüphane içerisine Context,Entities,Map klasörlerini açıyoruz.
1.2)Entities klasöründe AppUser,Category,OrderDetails,Orders,Product,SubCategory sınıflarını açıyoruz.
1.3)Maps klasöründe tüm entitylerin mapleme işlemlerini gerçekleştiriyoruz. CoreMap sınıfından miras alarak ortak propertyler ekleniyor.
1.4)Context klasörü içerisine ProjectContext sınıfını açıyoruz.
1.4.1)Sınıf içerisinde onModelCreating metodunu override ediyoruz ve yazmış olduğumuz map sınıflarını konfigürasyonlara ekliyoruz.
1.4.2)DBSetleri tanımlıyoruz.
1.4.3)SaveChanges metodunu override ediyoruz. Bu sayede güncellenen ve yeni eklenen tüm entity'ler otomatik olarak bazı sütunlarına değerleri alıyor.(CreatedMachineName veya ModifiedDate vb..)
1.5)enable-migrations -enableAutomaticMigrations ile console üzerinden migrate ediyoruz. Update-database yapıyoruz.

--Service--
Referanslar = NTier.Core , NTier.Model , Entity Framework(NuGet)
1)NTier.Service isimli bir C# Library açıyoruz.
1.1)Kütüphane içerisine Base ve Option isimli iki klasör açıyoruz.
1.2)Base içerisine BaseService sınıfını açıyoruz. Bu sınıf içerisine ICoreService üzerinde tanımlanmış olan tüm metotların gövdelerini ekliyoruz.
1.3)Option klasörü içerisine tüm entityleri service olarak açıyoruz. Entity'e özel metotları varsa eğer ekliyoruz.

--UI--
Referanslar = NTier.Core , NTier.Model , NTier.Service , EntityFramework(NuGet)
1)Proje içerisine layout oluşturuyoruz.
2)Partial View oluşturarak Kategori menüsünü layout içerisine ekliyoruz.(HomeController içerisindeki [ChildActionOnly] bu partialView için. _CategoryList menüyü içermektedir.)
!!NOT: HomeController içerisinde FormsAuthentication işlemleri API aşamasına bırakılmalıdır.
3)ProductController ile Ürün listeleme metotlarımızı oluşturuyoruz.
4)Sepete ekleme işlemleri için Cart sınıfını Models altına ekliyoruz.(Session örneğindeki sepet işlemlerinin aynısını ekliyoruz)
-Bazı sayfalarda bulunan "Regex'ler" anlatım için eklenmiştir.öğrenciler bu regular expression'ları internetten bulabilir ve projelerine ekleyebilirler.Proje içerisinde işleri belli input alanlarında yazım kuralları atamaktır(Email içerisinde @ işareti olması, büyük/küçük harf kuralları vb...)

--UI/Admin(AREA)--
1)Proje içerisine Admin Area ekliyoruz. Route.Config içerisine area kodunu ekliyoruz.
1.1)Admin Area için Layout oluşturuyoruz.
1.2)CRUD işlemleri tüm entityler için controller'lar içerisine ekleniyor.
2)Helpers klasöründeki ImageUploader sınıfını oluşturuyoruz.(Bu sınıf ile ürün ve product image ekleme işlemlerimiz için path oluşturuyoruz)

--UI/Member(AREA)--
1)Member alanında Sepet(Cart),Checkout(sipariş tamamlama),Register(Yeni üye kaydı) işlemlerimiz için controller'lar oluşturuyoruz.
Sepet için ProductCart sınıfını models içerisine eklemeyi unutmamalıyız.

--NTier.AuthService--
Referanslar = NTier.Core , NTier.Model , NTier.Service
1)Solution içerisine API projesi ekliyoruz.
2)Login.cshtml içerisine eklediğimiz ajax kodu ile kullanıcı bilgilerini API'ye gönderiyoruz.
3)Api içerisindeki controller ile gelen verilere göre yönlendirme gerçekleştiriyoruz.(ID bu aşamada url üzerinden iletilecektir ve UI-HomeController içerisine FormsAuthentication eklenecektir. Web.Config içerisine authentication için gerekli bölümü eklemeyi unutmayın.)
4)Logout için _Layout içerisine link ekliyoruz ve Api içerisindeki controller'a yönlendirme yapıyoruz.


																--NOTLAR--

--Web servis token based authentication içermediği için tekrar yönlendirme yapmaktadır. FormsAuthentication iki domain arasında aynı seansı taşıyamamaktadır. Taşıması için veritabanında ayarlama yapmak gereklidir. Amaç öğrencilerin servisleri nasıl projeye entegre edebileceklerini göstermektir.

--[CustomAuthorize(Role.Admin)] ve [CustomAuthorize(Role.Member,Role.Admin)] Attributes klasörü içerisindeki CustomAuthorize sınıfında tanımlanmaktadır. Birden fazla rol bu sayede belirtilebiliyor.

--ImageUploader sınıfı Helpers klasörü altında bulunmaktadır.İşi bir dosya gelmiş mi bunu kontrol etmek ve eğer gelmişse dosya adını guid ile değiştirmektir.Arkasından Uploads isimli klasöre kaydetmekte. 0-1-2 gibi durumların ne anlama geldiği sınıf içerisinde belirtilmektedir.

--Sepet işlemleri MVC session içerisindeki kodlarla aynıdır.